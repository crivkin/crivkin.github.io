{"version":3,"sources":["components/TopBar.js","pages/LandingPage.js","pages/ResourcesPage.js","pages/TransferPage.js","pages/CheckListPage.js","App.js","serviceWorker.js","index.js"],"names":["topBarStyle","text-decoration","color","TopBar","react_default","a","createElement","class","style","Link","to","Component","linkStyle","LandingPage","className","components_TopBar","ResourcesPage","TransferPage","CheckListPage","App","BrowserRouter","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8RAGMA,EAAc,CACnBC,kBAAmB,OACnBC,MAAO,SAeOC,mLAVb,OACCC,EAAAC,EAAAC,cAAA,OAAKC,MAAM,SAASC,MAAOR,GAC1BI,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAG,IAAIF,MAAOR,GAApB,qBALgBW,aCJfC,EAAY,CACjBX,kBAAmB,OACnBC,MAAO,WAmBOW,mLAdX,OACET,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,eACbV,EAAAC,EAAAC,cAACS,EAAD,MACAX,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAG,aAAaF,MAAOI,GAA7B,0BACAR,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WACNF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAG,YAAYF,MAAOI,GAA5B,yBACAR,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WACNF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAG,aAAaF,MAAOI,GAA7B,0BACAR,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,mBAVYK,aCKXK,mLATX,OACEZ,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,iBACdV,EAAAC,EAAAC,cAACS,EAAD,MACCX,EAAAC,EAAAC,cAAA,+CALoBK,aCWbM,mLATX,OACEb,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,gBACdV,EAAAC,EAAAC,cAACS,EAAD,MACCX,EAAAC,EAAAC,cAAA,8CALmBK,aCWZO,mLATX,OACEd,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,iBACdV,EAAAC,EAAAC,cAACS,EAAD,MACCX,EAAAC,EAAAC,cAAA,+CALoBK,aCwBbQ,mLAfX,OACEf,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OACbV,EAAAC,EAAAC,cAACc,EAAA,EAAD,KACEhB,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,UACbV,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWX,IACjCT,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOE,KAAK,aAAaC,UAAWR,IACpCZ,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOE,KAAK,YAAYC,UAAWP,IACnCb,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOE,KAAK,aAAaC,UAAWN,cAT9BP,aCEEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a83a4cc7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst topBarStyle = {\r\n\t'text-decoration': 'none',\r\n\tcolor: 'black'\r\n}\r\n\r\nclass TopBar extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div class='TopBar' style={topBarStyle}>\r\n\t\t\t\t<h1>\r\n\t\t\t\t\t<Link to='/' style={topBarStyle}>HomeBase</Link>\r\n\t\t\t\t</h1>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default TopBar;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { TopBar } from '../components';\r\n\r\nconst linkStyle = {\r\n\t'text-decoration': 'none',\r\n\tcolor: '#333333'\r\n}\r\n\r\nclass LandingPage extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"LandingPage\">\r\n        <TopBar />\r\n        <Link to='/resources' style={linkStyle}>link to resources page</Link>\r\n        <br /><br />\r\n        <Link to='/transfer' style={linkStyle}>link to transfer page</Link>\r\n        <br /><br />\r\n        <Link to='/checklist' style={linkStyle}>link to checklist page</Link>\r\n        <br /><br />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LandingPage;","import React, { Component } from 'react';\r\nimport { TopBar } from '../components';\r\n\r\nclass ResourcesPage extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"ResourcesPage\">\r\n      \t<TopBar />\r\n        <p>This is the Resources Page</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ResourcesPage;\r\n","import React, { Component } from 'react';\r\nimport { TopBar } from '../components';\r\n\r\nclass TransferPage extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"TransferPage\">\r\n      \t<TopBar />\r\n        <p>This is the Transfer Page</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TransferPage;\r\n","import React, { Component } from 'react';\r\nimport { TopBar } from '../components';\r\n\r\nclass CheckListPage extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"CheckListPage\">\r\n      \t<TopBar />\r\n        <p>This is the CheckList Page</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CheckListPage;\r\n","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport './App.css';\r\nimport {\r\n  LandingPage,\r\n  ResourcesPage,\r\n  TransferPage,\r\n  CheckListPage\r\n} from './pages';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Router>\r\n          <div className='router'>\r\n            <Route exact path='/' component={LandingPage} />\r\n            <Route path='/resources' component={ResourcesPage} />\r\n            <Route path='/transfer' component={TransferPage} />\r\n            <Route path='/checklist' component={CheckListPage} />\r\n          </div>\r\n        </Router>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}